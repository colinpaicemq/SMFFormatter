//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution
char * pSMFZ;
void * serverRoot =  NULL;
void * IPRoot =  NULL;
// ILP32 and LP64 data models and data type sizes
FILE * S12302 = 0;

 int   API(char *  in, char * buffer)
 {
   int i = * (char *) in;  // get the int from the buffer
   int l = 0;
   switch(i )
   {
      case 1:
           l=sprintf(buffer,"API\0");
           break;
      case 2:
           l=sprintf(buffer,"Service\0");
           break;
      case 3:
           l=sprintf(buffer,"Admin\0");
           break;
      default:
           l=sprintf(buffer,"Unknown %d\0",in);
   }
   return l;
 }
void  doSMF123_1_1(char * pSMF,long count){
  if  (S12302 == 0 ) S12302 = MYOPEN("dd:S12302");
  if  (S12302 == (FILE *)     -1)return;
  if (S12302 ==0 ) return;
  fHandle =  S12302;
  fprintf(fHandle,"==123-02 ================= record %lu\n",count);
  pSMFZ = pSMF;
  char * pOffsetBase = pSMFZ;
  int offset;
  char * system;
  char * p = pSMF;
  xx(flag         ,1 ,%   ,"flag              ",NOPRINT);
  xx(rec_type     ,1 ,%   ,"Record type       ",NOPRINT);
  xx(time         ,4 ,%   ,"time              " ,NOPRINT);
  xx(date         ,4 ,%   ,"date              ",NOPRINT);
  xs(sid          ,4 ,%   ,"system id         ",NOPRINT);
  xs(ssid         ,4 ,%   ,"subsystem_id      ",NOPRINT);
  xi(subtype      ,2 ,%   ,"smf record subtype",NOPRINT);
  xi(subversion   ,4 ,%   ,"Record subtype    ",NOPRINT);
  xi(Triplets_n   ,1 ,%   ,"Triplet count     ",NOPRINT);
  xi(Triplets_o   ,1 ,%   ,"Triplet offset    ",NOPRINT);
  xi(Reserverd1   ,2 ,%   ,"Reserved 1        ",NOPRINT);
  xx(CVTLDTO      ,8 ,%   ,"Local date time offset ",NOPRINT);
  TRIPLET(TRIPLETS,pSMF +*Triplets_o - 4, 1 ,16,NOPRINT);
    xi(server_o   ,4,%    ,"Server offset     ",NOPRINT);
    xi(server_l   ,2,%    ,"Server length     ",NOPRINT);
    xi(server_c   ,2,%    ,"Server count      ",NOPRINT);
    xi(request_o  ,4,%    ,"req_data_o        ",NOPRINT);
    xi(request_l  ,2,%    ,"req_data_l        ",NOPRINT);
    xi(request_c  ,2,%    ,"req_data_c        ",NOPRINT);
    TRIPLET(SERVER,pSMFZ+*server_o - 4, *server_c ,*server_l, NOPRINT);
       xi(server_vers,1,%     ,"Server version    ",NOPRINT);
       xx(server_re2 ,3,%     ,"Reserved2         ",NOPRINT);
       xs(System     ,8,%    ,"System             ",NOPRINT);
       system = System;
       xs(Sysplex    ,8,%    ,"Syplex             ",NOPRINT);
       xs(jobid      ,8,%    ,"Server job id      ",NOPRINT);
       xs(jobname    ,8,%    ,"Server job name    ",NOPRINT);
       xx(Stoken     ,8,%     ,"Stoken            ",NOPRINT);
       xs(configdir  ,128,%     ,"dir             ",NOPRINT);
       xs(serververss,16 ,%16.16s ,"server version",NOPRINT);
   ETRIPLET(server);

   TRIPLET(Request,pSMFZ+*request_o - 4,
        *request_c ,*request_l, NOPRINT);
 // char * zz = p;
    xi(Request_ver,1  ,%     ,"Request version    ",NOPRINT);
    xfn(Req_type  ,1,  API   ,"Request type      ",  PRINT);
    xi(Http_code  ,2  ,%     ,"Http code         ",  PRINT);
    xx(Resp_flag  ,1  ,%     ,"Resp flag         ",  PRINT);
    xx(Reserved   ,3  ,%     ,"reserved          ",NOPRINT);
    xs(UserName   ,64 ,%nb   ,"user name          ",  PRINT);
    xs(Userid     ,8  ,%nb   ,"userid            ",  PRINT);
    xs(clientip   ,48 ,%nb   ,"client ip         ",  PRINT);
    xs(APINAme    ,64 ,%nb   ,"API name          ",  PRINT);
    xs(APIVersion ,8 , %nb   ,"API Version       ",  PRINT);
    xs(serviceName,64 ,%nb   ,"Service Name      ",  PRINT);
    xs(serverver  ,8  ,%nb   ,"Service Version   ",  PRINT);
    xs(req_method ,8  ,%nb   ,"Method            ",  PRINT);
    xs(querystr   ,128,%nb   ,"query String      ",  PRINT);
    xs(targeturi1 ,128,%     ,"targeturi1        ",  PRINT);
    xs(targeturi2 ,128,%nb   ,"targeturi2        ",  PRINT);
    xi(req_payl_l ,4  ,%     ,"req payload len   ",   PRINT);
    xi(resp_payl_l ,4 ,%     ,"resp payload len  ",NOPRINT);
    xSTCKEDT(timeZCentry ,16,%,"time entry       ",  PRINT);
    xSTCKEDT(timeZCexit ,16,% ,"time exit        ",  PRINT);
    xSTCKEDT(timeSRentry ,16 ,%    ,"time entry sor  ",NOPRINT);
    xSTCKEDT(timeSRexit  ,16 ,%    ,"time exit sor   ",NOPRINT);
    // special processing
    unsigned long long lduration =  timeZCexitll - timeZCentryll;
    float duration =  ((float) lduration )/1000000;
    printfloat("duration",duration,"%","Tran dur in secs");

    xs(ServicePro        ,16 ,%    ,"Service provider",  PRINT);
    xs(SORRef            ,32 ,%nb  ,"SOR reference   ",  PRINT);
    xs(SORID             ,64 ,%nb  ,"SOR ID          ",  PRINT);
    xs(SORResource       ,128,%nb  ,"SOR resource    ",  PRINT);
    xx(req_id            ,8  ,%    ,"Request id      ",  PRINT);
    xs(Trackingtok       ,64 ,%    ,"Tracking token  ",NOPRINT);
    xs(reqHdr1           ,64 ,%nb  ,"Requesthdr1     ",NOPRINT);
    xs(reqHdr2           ,64 ,%nb  ,"Requesthdr2     ",NOPRINT);
    xs(reqHdr3           ,64 ,%nb  ,"Requesthdr3     ",NOPRINT);
    xs(reqHdr4           ,64 ,%nb  ,"Requesthdr4     ",NOPRINT);
    xs(respHdr1          ,64 ,%nb  ,"Responsehdr1    ",NOPRINT);
    xs(respHdr2          ,64 ,%nb  ,"Responsehdr2    ",NOPRINT);
    xs(respHdr3          ,64 ,%nb  ,"Responsehdr3    ",NOPRINT);
    xs(respHdr4          ,64 ,%nb  ,"Responsehdr4    ",NOPRINT);

    // add tree for useri name, http code and service name
     char vsbuffer[200];
     sprintf(vsbuffer,"%8.8s %3.3i %16.16s\0", system,
     UserName,*Http_code,
     serviceName);
     addTree(vsbuffer,duration,0,&serverRoot);

    // add tree for  IP address userid, http code and service name
     sprintf(vsbuffer,"%8.8s %8.8s %3.3i %16.16s\0",
       clientip,
       UserName,*Http_code,
       serviceName);
     addTree(vsbuffer,duration,0,&IPRoot);
   fprintf(fHandle," \n");
   ETRIPLET(request);
   ETRIPLET(pTriplets);
}
