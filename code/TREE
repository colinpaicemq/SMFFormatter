//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution
#include <search.h>
//
// Stucture to hold the data
//
typedef struct{
         unsigned long long    etmax,etmin,ettotal;
         unsigned long long   cpumax,cpumin,cputotal;
         int  count;
         char  key[0];
} node;
int   addTree(char * key,
              unsigned long long duration,
              unsigned long long CPU,
              void **treeRoot)
{
  int    msg_compare(const void *, const void *);
  void   print_msg_node(const void *, VISIT, int);
  node * pnode;
  /* allocate our node - we cant use automatic storage as it may */
  /* be added to the tree - so can not be deleted                */
  int keyLen = strlen(key)+1;
  int mallocSize = keyLen + sizeof(node)+1 ; //+1 for trailing null
  pnode = (node *) malloc(mallocSize         );
  if (pnode == 0)
  {
          perror("Malloc for node failed ");
          return 8;
  }
  /* initialise it  */
  strcpy(&(pnode->key[0]),key);
  void * p    ;
  node * q    ;
  p     = (void * ) pnode;
  /* add it to the tree - it returns node in the tree   */
  void * pt =*treeRoot;
  q     = *(node **) tsearch( p , (void **)&pt ,msg_compare);
  * treeRoot = pt;
  if (q == p ){ /* it didnt exist before - thus it was added */
      unsigned long long mics = duration     ;
      q-> count = 1;
      q-> ettotal  = mics         ;
      q-> etmax    = mics         ;
      q-> etmin    = mics         ;
      q-> cputotal = CPU          ;
      q-> cpumax   = CPU          ;
      q-> cpumin   = CPU          ;
        }
  else /* it did exist before so we need to check and update  */
  {
      unsigned long long mics = duration     ;
        q-> count +=1;
        q-> ettotal   += mics         ; // convert from stck
        if ( mics > q-> etmax)
           q-> etmax = mics;
        if ( mics < q-> etmin)
           q-> etmin = mics;
        q-> cputotal += CPU          ; // convert from stck
        if ( CPU > q-> cpumax)
           q-> cpumax  = CPU ;
        if ( CPU  < q-> cpumin)
           q-> cpumin = CPU;
        /* release the storage we dont need */
        free (pnode);
  }
  return 0;
}
/*
 *  This routine compares two nodes, based on an
 *  alphabetical ordering of the string field.
 */
int msg_compare(const void *node1, const void *node2)
{ node * p1, * p2;
        int rc;
        p1 = (  node *) node1;
        p2 = (  node *) node2;
  return strcmp(p1-> key, p2 -> key);
}
FILE * output ;
void printLeaf(const void *ptr, VISIT order, int level)
{
  node *p = *(node **) ptr;
  if(order == leaf|| order == postorder)
  {
    char * pOut;
    int len = strlen(  p-> key);
    unescape(p->key,len );
    unsigned long long etavg = p->ettotal/p->count;
    unsigned long long cpuavg = p->cputotal/p->count;
    float f1,f2,f3,f4,f5,f6,f7;
    f1 =((float) etavg ) /1000000;
    f2 =((float) p-> etmax  )/1000000;
    f3 =((float) p-> etmin  )/1000000;
    f4 =((float) p-> cputotal)/1000000;
    f5 =((float) cpuavg     )/1000000;
    f6 =((float) p-> cpumax )/1000000;
    f7 =((float) p-> cpumin )/1000000;
    if (len > 128) len = 128;
    fprintf(output ,"%5i,%6.3f,%6.3f,%6.3f,"
    "!%9.3f,%6.3f,%6.3f,%6.3f,%-*.*s\n",
       p->count   ,
       f1,     // etavg      ,
       f2,     // p-> etmax    ,
       f3,     // p-> etmin    ,  // !
       f4,     // p-> cputotal,
       f5,     // cpuavg      ,
       f6,     // p-> cpumax    ,
       f7,     // p-> cpumin    ,
       len,len,
       p->key);
   }
}
long printTree(char * fileName, void * treeRoot,char * heading)
{
  __amrc_type save_amrc;
  #define FOPENOPT "a   "
  output  = fopen(fileName   ,FOPENOPT);
  if ( output  == NULL)
  {
     save_amrc = *__amrc;
     fprintf(stderr," error opening %s ",fileName );
     fprintf(stderr," %s \n", strerror(errno)); /* text of the errno*/
     return;
  }
  // dont print header if no records
  if ( treeRoot  ==  NULL) return;
  fprintf(output,"count et:avg    max    min"
  " !CPU:tot    avg    max    min %s\n"
      ,heading);
  twalk(treeRoot , printLeaf);
  fclose(output );
        return 0;
}
