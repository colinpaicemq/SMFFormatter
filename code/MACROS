//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution
// ===================================================================
// Macros to define fields in an SMF record
// ===================================================================
//
// print the field offset at the start of the record if
// field printOffset > 0
//
#define OFFSET(a,b,c,d) \
  if (printOffset > 0           ) \
  fprintf(fHandle,"     %12.12s offset %3.1i  len %3.1i.\n"d,a, b,c);
//
// call a function to process a field.  Data is returned in a
// char field[132] which can then be output.
// Typical use is decoding fields
//
#define xfn(name,length,fn,comment,clause) \
    OFFSET(#name,p-pOffsetBase,length,""); \
    char name[133]; \
    { \
      int l =fn(p,&name[0]); \
      name[l]=0; /* make it null terminated */\
      if ( clause) \
      printfs(#name,name,"%",l, comment); \
    } \
    p += length;
//
//
//  Take a STCK value eg CPU time and convert to microseconds
// in unsigned long long.  Take STCK and divide by 4096
// convert it to float
#define xSTCKf(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    float name =  ((float)(* (int##length *) p)/4096) /1000000; \
   {\
    if ( clause) \
      printfloat(#name,name ,#format,comment); \
    }\
    p += length;
//
//  Take a STCK value eg CPU time and convert to microseconds
// in unsigned long long.  Take STCK and divide by 4096
#define xSTCKll(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    ll##length  name   = (* (int##length *) p)/4096; \
   {\
    if ( clause) \
      printfi8(#name, name , #format,length, comment); \
    }\
    p += length;
//
//  Take an 8 byte STCK and create a date time string
//  The field name is the passed field name +dt
//  also convert to microseconds field name +ll
#define xSTCKDT(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    char name##dt[27] ; \
    unsigned long long   name##ll; \
    name##ll         = (*(unsigned long long *) p)/4096 ;  \
    STCKTIME( p,8, (char *) &name##dt); /* 8 STCK */ \
    if (clause ) \
    { \
     printfs(#name, name##dt        ,#format,26, comment); \
    }\
    p += length;
//
//  Take a 16 byte STCKE and create a date time string
//  The field name is the passed field name +dt
//  also convert to microseconds field name +ll
//  to convert a STCKE to microseconds divide by 16,
//  (STCK is divide by 4096) but STCKE has extra byte on the front
#define xSTCKEDT(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    char name##dt##[27] ; \
    unsigned long long   name##ll; \
    name##ll = (* (unsigned long long *) p)/16 ; \
    STCKTIME( p,16, (char *) &name##dt); /* 16 STCKE */ \
    if (clause ) \
    { \
     printfs(#name, (char *)  name##dt        ,#format,26, comment); \
    }\
    p += length;
// triplet
// set up code to iterate around as many times as requested
// reset the pointer to reset the offset.
// print it hex if required
#define TRIPLET(name,start,count,length,clause) \
  if (clause) \
  fprintf(fHandle,"==%s=%s\n",#name,#clause); \
  { char * q = start; \
    int llen = length;  \
    char * p = q    ;  \
    for (int i=0;i<count;i++) { \
    if ( clause) printHexS(p,length); \
    pOffsetBase = p;

// end of triplet
// add pointer with the length
#define ETRIPLET(name)                      \
    q += llen; p = q; \
     } \
   }

// Display an integer
// it relies on a typedef int1, int2, int4, int8 etc
// it then calls printfi1, printfi2, printfi4, printfi8
#define xf(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    float  name        =*(int##length *) p; \
    if ( clause) \
      printfloat(#name,name ,#format,comment); \
    p += length;

// Display an integer
// it relies on a typedef int1, int2, int4, int8 etc
// it then calls printfi1, printfi2, printfi4, printfi8
#define xi(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    int##length  name        =*(int##length *) p; \
    if ( clause) \
      printfi##length(#name, name,#format,length,comment); \
    p += length;
//  hundredths of a second - smf 30
#define xh(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    float name =   (float)(* (int##length *) p)*0.01; \
   {\
    if ( clause) \
      printfloat(#name,name ,#format,comment); \
    }\
    p += length;
// for units of 1024 microsecond
#define xk(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    float name =   (float)(* (int##length *) p)* 0.001024 ;\
   {\
    if ( clause) \
      printfloat(#name,name ,#format,comment); \
    }\
    p += length;

// for units of 128  microsecond  ( eg SMF 30 IO)
#define xj(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    float name =   (float)(* (int##length *) p)* 0.000128 ;\
   {\
    if ( clause) \
      printfloat(#name,name ,#format,comment); \
    }\
    p += length;

// display in hex
#define xx(name,length,format,comment,clause) \
    OFFSET(#name,p-pOffsetBase,length,""); \
    if ( clause) \
      printfx(#name, p ,#format,length, comment); \
    char * name      ;  /* [length#] */ \
    name   =     p;  \
    p += length;

// display a string
#define xs(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    if (clause) \
      printfs(#name, p,#format,length, comment); \
    char  name[length+1];        \
    memcpy(&name,p,length); /* copy it*/  \
    name[length]=0;   /* set a trailing null */  \
    p += length;
#ifdef no
#define xsold(name,length,format,comment,clause)\
    OFFSET(#name,p-pOffsetBase,length,""); \
    if (clause) \
      printfs(#name, p,#format,length, comment); \
    char * name ;                 \
    name  =  p; \
    p += length;
#endif
// look up a 1 char field in structure
#define xflag(name,length,dStruct,comment,clause) \
     OFFSET(#name,p-pOffsetBase,length,""); \
     int##length  name        =*(int##length *) p; \
     if ( clause) \
     { \
    doFlags(comment,name,dStruct,sizeof(dStruct)/sizeof(flagTable));\
     } \
     p += length;
#define xlist(name,length,dStruct,comment,clause) \
     OFFSET(#name,p-pOffsetBase,length,""); \
     int##length  name        =*(int##length *) p; \
     if ( clause) \
     { \
    doFlags(comment,name,dStruct,sizeof(dStruct)/sizeof(flagTable));\
     } \
     p += length;
//       printfx(#name, p ,"%"    ,length, comment); \

// look up an integer in a  list
#define xlist2(name,length,dStruct,comment,clause) \
     OFFSET(#name,p-pOffsetBase,length,""); \
     int##length  name        =*(int##length *) p; \
     if ( clause) \
     { \
      doList(comment,name,dStruct,sizeof(dStruct)/sizeof(flagTable));\
     } \
     p += length;
//    printfx(#name, p ,"%"    ,length, comment); \

