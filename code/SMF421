//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution


FILE * SMF42_1  = 0;
//
// start processing here
//
void dosmf42_1( char  * pSMF,long count){
  if  (SMF42_1  == 0 ) SMF42_1  = MYOPEN("dd:S421    ");
  if  (SMF42_1  == (FILE *)   -1)return;
  // the printf* routines use this global variable
  fHandle = SMF42_1 ;
  int offset;
  int perCent;
  printOffset = 0;
  char * pSMFZ;
  char * pOffsetBase;   // this is used to caluclate field offsets
  pOffsetBase = pSMF;
  pSMFZ = pSMF;
  char * system;
  float fDuration;
  char startDT[27];
  char endDT[27];
  char * p = pSMF;  // this is incremented with each field
  //
  // start of fields
  //
  xi(LEN         ,2 ,%    ,"Record length     ",NOPRINT);
  xi(SEG         ,2 ,%    ,"Segment type      ",NOPRINT);
  xx(FLG         ,1 ,%    ,"Record Flag       ",NOPRINT);
  xx(rec_type    ,1 ,%    ,"Record type       ",NOPRINT);
  xfn(TME        ,4 ,SMFTime ,"SMFTime        ",NOPRINT);
  xfn(DTE        ,4 ,SMFDate ,"SMFDate        ",NOPRINT);
  xs(sid         ,4 ,%    ,"SMF system id     ",NOPRINT);
  xs(ssid        ,4 ,%    ,"SMF subsystem_id  ",NOPRINT);
  xi(subtype     ,2 ,%    ,"SMFSubtype        ",NOPRINT);
  xi(NT          ,2 ,%    ,"Number of triplets",NOPRINT);
  xx(res1a       ,2 ,%    ,"reserverd         ",NOPRINT);
  xi(OPS         ,4 ,%    ,"offset to prod    ",NOPRINT);
  xi(LPS         ,2 ,%    ,"Length    prod    ",NOPRINT);
  xi(NPS         ,2 ,%    ,"Number    prod    ",NOPRINT);
  xi(BMO         ,4 ,%    ,"offset to BMF     ",NOPRINT);
  xi(BML         ,2 ,%    ,"Length  BMF       ",NOPRINT);
  xi(BMN         ,2 ,%    ,"Number  BMF       ",NOPRINT);
  xi(SCO         ,4 ,%    ,"offset to Subsclas",NOPRINT);
  xi(SCL         ,2 ,%    ,"Length  SC        ",NOPRINT);
  xi(SCN         ,2 ,%    ,"Number  SC        ",NOPRINT);
  TRIPLET(Prod  t,pSMFZ+ OPS         ,
        NPS      , LPS      ,NOPRINT);
     xs(PDL              ,8  ,%     ,"Product level      ",NOPRINT);
     xs(PDN              ,10 ,%     ,"Product name       ",NOPRINT);
     xi(PSV              ,1  ,%     ,"subversion         ",NOPRINT);
     xi(PSVRES           ,1  ,%     ,"Reserved           ",NOPRINT);
     xSTCKDT(PTS         ,8  ,%     ,"Start time         ",NOPRINT);
     xSTCKDT(PTE         ,8  ,%     ,"End   time         ",NOPRINT);
     unsigned long long lduration =  PTEll - PTSll;
     fDuration =  ((float) lduration )/1000000;
     fprintf(fHandle,"Date time %27.27s to %27.27s Duration:%6.3f\n",
     PTSdt,PTEdt,fDuration);
     memcpy(&startDT[0],PTSdt,sizeof(startDT));
     memcpy(&endDT[0],PTEdt,sizeof(endDT));
     xx(res36            ,4  ,%     ,"Reserverd          ",NOPRINT);
 ETRIPLET(Prod     );
  TRIPLET(BMF   t,pSMFZ+ BMO         ,
        BMN      , BML      ,NOPRINT);
     xi(TNA              ,4  ,%     ,"Number of SC       ",NOPRINT);
     xi(TMT              ,4  ,%     ,"Interval in seconds",NOPRINT);
     xi(TRT              ,4  ,%     ,"mem Data page reads",NOPRINT);
     xi(TRH              ,4  ,%     ,"mem data page by BMF",NOPRINT);
     xi(TDT              ,4  ,%     ,"dir page reads     ",NOPRINT);
     xi(TDH              ,4  ,%     ,"dir page reads by BMF",NOPRINT);
     xi(BUF              ,4  ,%     ,"BMF 4K buffers     ",NOPRINT);
     xi(BMX              ,4  ,%     ,"HWM BMF buffers    ",NOPRINT);
     xi(LRU              ,2  ,%     ,"BMF LRU time       ",NOPRINT);
     xi(UIC              ,2  ,%     ,"BMF LRU cycles cast",NOPRINT);
     fprintf(fHandle,"BMF:LRU time         : %hu "
                      "cycles till cast out:%hu\n",
                      LRU,UIC);
     fprintf(fHandle,"BMF:Buffers: %6.1u HWM:%6.1u\n",
                       BUF,BMX);
     if (TRT== 0 ) perCent = 100;
     else
     {
       perCent = (100 * (TRT- TRH) /TRT) ;
     }
     fprintf(fHandle,"BMF:==TOTAL==                     "
                     "Data pages read:%10.1u "
                     "read by BMF:%10.1u "
                     "not read by BMF:%10.1u (%3.1u %%)\n",
                       TRT,TRH,TRT-TRH,perCent);
     if (TDT== 0 ) perCent = 100;
     else
     {
       perCent = (100 * (TDT- TDH) /TDT) ;
     }
     fprintf(fHandle,"BMF:==TOTAL==                     "
                     "Dir  pages read:%10.1u "
                     "read by BMF:%10.1u "
                     "not read by BMF:%10.1u (%3.1u %%)\n",
                       TDT,TDH,TDT-TDH,perCent);
 ETRIPLET(BMF      );
 TRIPLET(SC     ,pSMFZ+ SCO         ,
        SCN      , SCL      ,NOPRINT);
     xi(PNL              ,2  ,%     ,"Length SC          ",NOPRINT);
     xs(PNN              ,30 ,%     ,"Storage class name ",NOPRINT);
     xi(SRT              ,4  ,%     ,"mem Data page reads",NOPRINT);
     xi(SRH              ,4  ,%     ,"MDP by BMF         ",NOPRINT);
     xi(SDT              ,4  ,%     ,"dir page reads     ",NOPRINT);
     xi(SDH              ,4  ,%     ,"dir page reads BMF ",NOPRINT);
     if (SRT== 0 ) perCent = 100;
     else
     {
       perCent = (100 * (SRT- SRH) /SRT) ;
     }
     fprintf(fHandle,"SC:%-30.30s "
                     "Data pages read:%10.1u "
                     "read by BMF:%10.1u "
                     "not read by BMF:%10.1u (%3.1u %%)\n",
                      PNN,SRT,SRH,SRT-SRH,perCent);
     if (SDT== 0 ) perCent = 100;
     else
     {
       perCent = (100 * (SDT- SDH) /SDT) ;
     }
     fprintf(fHandle,"SC:%-30.30s "
                     "Dir  pages read:%10.1u "
                     "read by BMF:%10.1u "
                     "not read by BMF:%10.1u (%3.1u %%)\n",
                      PNN,SDT,SDH,SDT-SDH,perCent);
 ETRIPLET(BMF      );
 fprintf(fHandle," \n");
}
