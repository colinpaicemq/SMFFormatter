//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution

FILE * ASSOC    = 0;
//
// start processing here
//
void dcollecta( char  * pSMF,long count, int inum){
  if  (ASSOC    == 0 ) ASSOC    = MYOPEN("dd:ASSOC   ");
  if  (ASSOC    == (FILE *)   -1)return;
 struct flagTable FLAG1[] =
 {
   { 0xff, 0x80,"KSDS              " },
   { 0xff, 0x40,"ESDS              " },
   { 0xff, 0x20,"RRDS              " },
   { 0xff, 0x10,"Linear            " },
   { 0xff, 0x08,"Key range         " },
   { 0xff, 0x04,"Alternate index   " },
   { 0xff, 0x02,"VSAM data component " },
   { 0xff, 0x01,"VSAM index component " },
 };
 struct flagTable FLAG2[] =
 {
   { 0xff, 0x80,"1st Segment of KR " },
   { 0xff, 0x40,"Alt index w/ Upgrade " },
   { 0xff, 0x20,"Variable length rel rec " },
   { 0xff, 0x10,"No VSAM stats available " },
   { 0xff, 0x08,"RBA is CI number  " },
   { 0xff, 0x04,"Extended addressibility " },
   { 0xff, 0x02,"ZFS               " },
   { 0xff, 0x01,"Reserved          " },
 };
  // the printf* routines use this global variable
  fHandle = ASSOC   ;
  int offset;
  printOffset = 0;
  char * pSMFZ;
  char * pOffsetBase;   // this is used to caluclate field offsets
  pOffsetBase = pSMF;
  pSMFZ = pSMF;
  char * system;
  float fDuration;
  char startDT[27];
  char endDT[27];
  char * p = pSMF;  // this is incremented with each field
  //
  // start of fields
  //
  fprintf(fHandle,"======ASSOC========\n");
  xi(DCULENG     ,2 ,%    ,"Length            ",NOPRINT);
  xx(Reserved    ,2 ,%    , "                 ",NOPRINT);
  xs(DCURCTYP    ,2 ,%   ,"Type               ",NOPRINT);
  xi(DCURVERS    ,2 ,%   ,"version            ",NOPRINT);
  xs(DCUSYSID    ,4 ,%   ,"SYSID              ",  PRINT);
  xfn(DCUTIME    ,4 ,SMFTime ,"Time           ",  PRINT);
  xfn(DCUDATE    ,4 ,SMFDate ,"Date           ",  PRINT);
  xx(reserverd20 ,4 ,%    ,"                  ",NOPRINT);

  xs(DCADSNAM    ,44,%    ,"Dataset name       ",  PRINT);
  xs(DCAASSOC    ,44,%    ,"Base cluster name  ",  PRINT);
  xflag(DCAFLAG1,1 ,FLAG1,"Flags1             ",  PRINT);
  xflag(DCAFLAG2,1, FLAG2,"Flags2             ",  PRINT);
  xx(reserved114 ,2 ,%    ,"reserved           ",NOPRINT);
  xi(DCAHURBA    ,4 ,%    ,"High Used RBA      ",  PRINT);
  xi(DCAHARBA    ,4 ,%    ,"High Alloc RBA     ",  PRINT);
  xi(DCANLR      ,4 ,%nz  ,"Number logical recs",  PRINT);
  xi(DCADLR      ,4 ,%nz  ,"Number deleted recs",  PRINT);
  xi(DCAILR      ,4 ,%nz  ,"Number insertedrecs",  PRINT);
  xi(DCAULR      ,4 ,%nz  ,"Number updated recs",  PRINT);
  xi(DCAASP      ,4 ,%nz  ,"Free space in bytes",  PRINT);
  xi(DCACIS      ,4 ,%nz  ,"Number of CI splits",  PRINT);
  xi(DCACAS      ,4 ,%nz  ,"Number of CA splits",  PRINT);
  xi(DCAEXC      ,4 ,%nz  ,"Number of EXCPs    ",  PRINT);
  xi(DCARKP      ,2 ,%nz  ,"Relative Key pos   ",  PRINT);
  xi(DCARKL      ,2 ,%nz  ,"Relative Key length",  PRINT);
  xi(DCAHURBC    ,8 ,%    ,"Highest Alloc RBA  ",  PRINT);
  xi(DCAHARBC    ,8 ,%    ,"Highest used  RBA  ",  PRINT);
  xi(DCACISZ     ,4 ,%    ,"CI size            ",  PRINT);
  xi(DCACACI     ,4 ,%    ,"Number of CIs in CA",  PRINT);
  xs(DCATRDT     ,4 ,%    ,"HSM trans date     ",  PRINT);
  xx(Reserved192 ,12,%    ,"Reserved           ",NOPRINT);

}
