//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution

#pragma csect(code,  "DCOLLECT")
#pragma csect(static,"DCOLLECTS")
// the width of the description at the start of the output line
#define wDesc 20
#include <ctype.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#define SMF_REC_MAX_SIZE 32756
#include <search.h>
#include <macros.h>
#include <time.h>

FILE * fHandle= 0;
/********************************************************************/
/* True and false.                                                  */
/********************************************************************/
#define TRUE            1
#define FALSE           0
#define PRINT  1
#define NOPRINT  0
#define DEF !!!
typedef unsigned char   int1;
typedef unsigned short  int2;
typedef unsigned int    int4;
typedef unsigned long long    int8;
typedef unsigned long long    ull;
typedef unsigned long long     ll8;
int size;
#include <printfs.h>
#define PRINT_EBCDIC_STRING(fieldName, value) {      \
    size = getEbcdicStringSize(value, sizeof(value));   \
    printf("%s%.*s\n", fieldName, size, value);      \
}
char dateTime[30];
/*******************************************************************/
/* Start the program                                               */
/*******************************************************************/
#include <MYOPEN.h>
#include <smf.h>
#include <HTTPCODE.h>
#include <printhx.h>
#include <tree.h>
#include <flags.h>
#include <list.h>
int printOffset=0;
#include <dcolld.h>
#include <dcollsc.h>
#include <dcollmc.h>
#include <dcolldc.h>
#include <dcollv.h>
#include <dcolla.h>
int main(void) {
   char *      pSMF = 0;
   char *      pRAW = 0; // this is the record including len and seg
                         // at the front
   short  * short2;
   long count = 0;
   long inum;              /* Number of bytes read from input     */
   __amrc_type save_amrc;  /* File return code information        */
   FILE * SMFIN;           /* SMF Input file                      */

    /****************************************************************/
    /* Open the input file called SMFIN                             */
    /* If the handle is null then put out an error message and quit */
    /****************************************************************/
    if ((SMFIN = fopen("dd:SMFIN", "rb, type=record")) == NULL)
    {
        save_amrc = *__amrc;
        printf(" Error opening SMFIN ");
        printf(" %s \n", strerror(errno));   /* text of the errno   */
        printf(" fopen errno=%d lastop=%d syscode=%X rc=%d\n", errno,
                 save_amrc.__last_op,
                 save_amrc.__code.__abend.__syscode,
                 save_amrc.__code.__abend.__rc);
        return 8 ;
    }
    /****************************************************************/
    /* Allocate memory to store an SMF record                       */
    /****************************************************************/
    pSMF = (char *        )__malloc31(SMF_REC_MAX_SIZE);
    if (pSMF == NULL) {
        printf(" Failed to allocate memory \n");
        return 8;
    }
    pRAW = pSMF - 4;   // point back past the Record len + segment
    char recordType;
    /****************************************************************/
    /* Loop through records until there is no more data to process  */
    /****************************************************************/
    for (count = 1;              ; count++)
    {
        inum = fread(pSMF,
                     sizeof(char),
                     SMF_REC_MAX_SIZE,
                     SMFIN);

        if (inum == 0) break;
        // pSMF is 4 bytes into the SMF structure so need
        // to bias the pointer
//   printf("++Record type %2.2s.\n",
//     pSMF+4);
    if (memcmp(pSMF+4,"D ",2)== 0)
          dcollectd(pSMF,count,inum);
    else
    if (memcmp(pSMF+4,"SC",2)== 0)
          dcollectsc(pSMF,count,inum);
    else
    if (memcmp(pSMF+4,"DC",2)== 0)
          dcollectdc(pSMF,count,inum);
    else
    if (memcmp(pSMF+4,"MC",2)== 0)
          dcollectmc(pSMF,count,inum);
    else
    if (memcmp(pSMF+4,"V ",2)== 0)
          dcollectv(pSMF,count,inum);
    else
    if (memcmp(pSMF+4,"A ",2)== 0)
          dcollecta(pSMF,count,inum);
 //   else printf("++Record type %2.2s.\n",
    }
    fclose(SMFIN);
    return 0;
}
