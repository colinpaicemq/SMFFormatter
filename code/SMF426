//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution

#include <u426.h>
FILE * SMF42_6  = 0;
int  SMF426DSTYP(char *  in, char * buffer)
 {
   switch(in[0])
   {
   case 0: strcpy(buffer,"other");   break;
   case 1: strcpy(buffer,"PS");   break;
   case 2: strcpy(buffer,"PDS");   break;
   case 3: strcpy(buffer,"PDSE");   break;
   case 4: strcpy(buffer,"DA");   break;
   case 5: strcpy(buffer,"ISAM");   break;
   case 6: strcpy(buffer,"EXCP");   break;
   case 7: strcpy(buffer,"ExPS");   break;
   case 10: strcpy(buffer,"HFS");   break;
   case 16: strcpy(buffer,"KSDS Data");   break;
   case 17: strcpy(buffer,"KSDS Indx");   break;
   case 18: strcpy(buffer,"V RRSS Data");   break;
   case 19: strcpy(buffer,"V RRSS Indx");   break;
   case 20: strcpy(buffer,"F RRDS");   break;
   case 21: strcpy(buffer,"Linear");   break;
   case 22: strcpy(buffer,"ESDS");   break;
   default:
        strcpy(buffer,"Unknown");   break;
  }
  return strlen(buffer);
 }
int  SMF426DSFL1(char *  in, char * buffer)
 {
   int ll; // length of line
   strcpy(buffer,"");
   // input is the variouse flags
   if (in[0] && 0xc0 == 0xc0 )
      strcat(buffer,"VSAM Buffer GSR,");
   else
   if (in[0] && 0xC0 == 0x80 )
      strcat(buffer,"VSAM Buffer LSR,");
   else
   if (in[0] && 0xC0 == 0x40 )
      strcat(buffer,"VSAM Buffer RLS,");
   else
      strcat(buffer,"VSAM Buffer NSR,");

   if (in[0] && 0x10 == 0x10 )
      strcat(buffer,"EXCP,");

   if (in[0] && 0x08 == 0x08 )
      strcat(buffer,"Non-VSAM fixed length records,");

   if (in[0] && 0x04 == 0x04 )
      strcat(buffer,"Program library,");

   if (in[0] && 0x02 == 0x02 )
      strcat(buffer,"Extened format,");

   if (in[0] && 0x01 == 0x01 )
      strcat(buffer,"Compressed,");
   ll = strlen(buffer);
   return ll;
 }
 int  SMF426DSCMT(char *  in, char * buffer)
 {
 buffer[0] = 0;
   int ll; // length of line
   int s =in[0];
   switch(s)
   {
     case 0: strcpy(buffer,"No compression\0");
             break;
     case 1: strcpy(buffer,"Generic compression\0");
             break;
     case 2: strcpy(buffer,"Tailored compression\0");
             break;
     case 3: strcpy(buffer,"ZEDC compression\0");
             break;
     default:
             strcpy(buffer,"Unknown compression\0");
   }
 #ifdef no
#endif
   ll = strlen(buffer);
   return 11;
 }
//
// start processing here
//
void dosmf42_6( char  * pSMF,long count){
  if  (SMF42_6  == 0 ) SMF42_6  = MYOPEN("dd:S426    ");
  if  (SMF42_6  == (FILE *)   -1)return;
  // the printf* routines use this global variable
  fHandle = SMF42_6 ;
  int offset;
  printOffset = 0;
  char * pSMFZ;
  fprintf(fHandle,"====SMF42 -6 =============== record %u\n",count);
  char * pOffsetBase;   // this is used to caluclate field offsets
  pOffsetBase = pSMF;
  pSMFZ = pSMF;
  char * system;
  float fDuration;
  char startDT[27];
  char endDT[27];
  char * p = pSMF;  // this is incremented with each field
  //
  // start of fields
  //
  xi(LEN         ,2 ,%    ,"Record length     ",NOPRINT);
  xi(SEG         ,2 ,%    ,"Segment type      ",NOPRINT);
  xx(FLG         ,1 ,%    ,"Record Flag       ",NOPRINT);
  xx(rec_type    ,1 ,%    ,"Record type       ",NOPRINT);
  xfn(TME        ,4 ,SMFTime ,"SMFTime        ",NOPRINT);
  xfn(DTE        ,4 ,SMFDate ,"SMFDate        ",NOPRINT);
  xs(SID         ,4 ,%    ,"SMF system id     ",NOPRINT);
  xs(ssid        ,4 ,%    ,"SMF subsystem_id  ",NOPRINT);
  xi(subtype     ,2 ,%    ,"SMFSubtype        ",NOPRINT);
  xi(NT          ,2 ,%    ,"Number of triplets",NOPRINT);
  xx(res1a       ,2 ,%    ,"reserverd         ",NOPRINT);
  xi(OPS         ,4 ,%    ,"offset to prod    ",NOPRINT);
  xi(LPS         ,2 ,%    ,"Length    prod    ",NOPRINT);
  xi(NPS         ,2 ,%    ,"Number    prod    ",NOPRINT);
  xi(JHO         ,4 ,%    ,"offset to Job head",NOPRINT);
  xi(JHL         ,2 ,%    ,"Length  Job Head  ",NOPRINT);
  xi(JHN         ,2 ,%    ,"Number  Job Head  ",NOPRINT);
  TRIPLET(Prod  t,pSMFZ+ OPS         ,
        NPS      , LPS      ,NOPRINT);
     xs(PDL              ,8  ,%     ,"Product level      ",NOPRINT);
     xs(PDN              ,10 ,%     ,"Product name       ",NOPRINT);
     xi(PSV              ,1  ,%     ,"subversion         ",NOPRINT);
     xi(PSVRES           ,1  ,%     ,"Reserved           ",NOPRINT);
     xSTCKDT(PTS         ,8  ,%     ,"Start time         ",NOPRINT);
     xSTCKDT(PTE         ,8  ,%     ,"End   time         ",NOPRINT);
     unsigned long long lduration =  PTEll - PTSll;
     fDuration =  ((float) lduration )/1000000;
     memcpy(&startDT[0],PTSdt,sizeof(startDT));
     memcpy(&endDT[0],PTEdt,sizeof(endDT));
     xx(res36            ,4  ,%     ,"Reserverd          ",NOPRINT);
 ETRIPLET(Prod     );
 TRIPLET(JobHeader  ,pSMFZ+ JHO         ,
        JHN       , JHL      ,NOPRINT);
     xs(JDJNM            ,8  ,%     ,"Job Name          ",NOPRINT);
     xi(JDRST            ,4  ,%     ,"job card time     ",NOPRINT);
     xi(JDRSD            ,4  ,%     ,"job card Date     ",NOPRINT);
     xx(JDUID            ,8  ,%nb   ,"Userid            ",NOPRINT);
     xi(JDDSO            ,4  ,%     ,"Offset dataset HD ",NOPRINT);
     xi(JDDSL            ,2  ,%     ,"Len    dataset HD ",NOPRINT);
     xi(JDCOD            ,1  ,%     ,"Close 0/Interval 1",NOPRINT);
     xi(JDRES31          ,1  ,%     ,"Reserved          ",NOPRINT);
     xi(JDDPGN           ,2  ,%     ,"Perf group numb   ",NOPRINT);
     xi(JDIOL            ,2  ,%     ,"Len IO stats      ",NOPRINT);
     xi(JDAML            ,2  ,%     ,"Len AM stats      ",NOPRINT);
     xi(JDRES38          ,2  ,%     ,"Reserved          ",NOPRINT);
     xi(JDGMO            ,4  ,%     ,"GMT offset        ",NOPRINT);
     xs(JDWSC            ,8  ,%nb   ,"WLM service class ",  PRINT);
     xs(JDWLD            ,8  ,%nb   ,"WLM Workload name ",  PRINT);
     xi(JDRES60          ,4  ,%     ,"Reserved 3        ",NOPRINT);
  fprintf(fHandle ,"\n"); /* blank line before */
  fprintf(fHandle ,"==Job:%8.8s "
       "SMF Date:%10.10s SMF Time:%11.11s Sysid:%4.4s Userid:%8.8s.\n",
        JDJNM, DTE ,TME ,SID,JDUID);
     fprintf(fHandle ,"Interval Start:%26.26s End:%26.26s"
       " Duration %8.3f seconds\n",
        startDT,endDT,fDuration);
  int dscount = 9999;
  // length needs to be zero because we calculate the offset of next
  // header from the field in the header
  TRIPLET(DSHeader   ,pSMFZ+ JDDSO,
        dscount   , 0/*   JDDSL */    ,NOPRINT);
     fprintf( fHandle,"====DSHeader====\n");
     xi(DSNXT            ,4  ,%nb   ,"Offset to next    ",NOPRINT);
     if (DSNXT == 0) dscount = 0;
     xs(DSN              ,44 ,%nb   ,"Data set name     ",NOPRINT);
     xfn(DSTYPE     ,1,SMF426DSTYP     ,"Dataset type   ",NOPRINT);
     xs(DSCOD            ,1  ,%     ,"First open        ",NOPRINT);
     xfn(DSFLAGS    ,1,SMF426DSFL1     ,"Dataset flags  ",NOPRINT);
     xx(DSReserved51     ,1  ,%     ,"Reserved          ",NOPRINT);
     xi(DSIOO            ,4  ,%     ,"Offset IO stats   ",NOPRINT);
     xi(DSAMO            ,4  ,%     ,"Offset AM stats   ",NOPRINT);
     xs(DSVOL            ,6  ,%     ,"Volser            ",NOPRINT);
     xx(DSDEV            ,2  ,%     ,"Device number     ",NOPRINT);
     xs(DSDSC            ,8  ,%     ,"Storage class     ",NOPRINT);
     xi(DSBSZ            ,4  ,%     ,"Block size        ",NOPRINT);
     xi(DSSTRP           ,2  ,%nz   ,"Number of stripes ",  PRINT);
     xi(DSENT            ,2  ,%nz   ,"Encryptioon type  ",  PRINT);
     xi(DSCMT            ,1  ,%nz   ,"Compression       ",  PRINT);
     xx(S426Res83        ,3  ,%     ,"Reserved          ",NOPRINT);
     xi(DSSNO            ,4  ,%     ,"Offset to sync    ",NOPRINT);
     xi(DSSNL            ,2  ,%     ,"Length Sync       ",NOPRINT);
     xi(DSRES94          ,2  ,%     ,"Reserved          ",NOPRINT);
     xi(DSSN2O           ,4  ,%     ,"Offset to sync 2  ",NOPRINT);
     xi(DSSN2L           ,2  ,%     ,"Length Sync    2  ",NOPRINT);
     xi(DSRES102         ,2  ,%     ,"Reserved          ",NOPRINT);
     xi(DSSN3O           ,4  ,%     ,"Offset to sync 3  ",NOPRINT);
     xi(DSSN3L           ,2  ,%     ,"Length Sync    3  ",NOPRINT);
     xi(DSRES110         ,2  ,%     ,"Reserved          ",NOPRINT);
     fprintf( fHandle,"%-44.44s vol:%6.6s type:%-8.8s "
                   "sc:%8.8s blksize:%5.1u\n",
                   DSN,DSVOL,DSTYPE,DSDSC,DSBSZ);
  U426S
  if ( JDDSL > 88) // offset to the seq section
  if ( DSSNO > 0 && DSSNL > 0)
  {
  TRIPLET(SYNCIO     ,pSMFZ+ DSSNO    ,
        1         ,  DSSNL,   NOPRINT);
     fprintf( fHandle,"====DS Sync ====\n");
     xi(SNERD            ,4  ,%nz   ,"Syn r req eli ^ att ",  PRINT);
     xi(SNERH            ,4  ,%nz   ,"Syn r hit eli ^ att ",  PRINT);
     xi(SNEWR            ,4  ,%nz   ,"Syn w req eli ^ att ",  PRINT);
     xi(SNRDT            ,4  ,%nz   ,"Syn IO read attempt ",  PRINT);
     xi(SNROS            ,4  ,%nz   ,"Syn IO read success ",  PRINT);
     xi(SNWDT            ,4  ,%nz   ,"Syn IO writeattempt ",  PRINT);
     xi(SNWOS            ,4  ,%nz   ,"Syn IO writesuccess ",  PRINT);
     xi(SNSEQ            ,4  ,%nz   ,"Syn IO seq ops      ",  PRINT);
     xi(SNCND            ,4  ,%nz   ,"Syn IO cache cand   ",  PRINT);
     xi(SNHTS            ,4  ,%nz   ,"Syn IO cache hits   ",  PRINT);
     xi(SNWCN            ,4  ,%nz   ,"Syn IO write cand   ",  PRINT);
     xi(SNWHI            ,4  ,%nz   ,"Syn IO write hits   ",  PRINT);
     xi(SNRMS            ,4  ,%nz   ,"Syn IO read miss    ",  PRINT);
     xi(SNWMS            ,4  ,%nz   ,"Syn IO write miss   ",  PRINT);
     xi(SNMXR            ,4  ,%nz   ,"Syn Mx resp t c read",  PRINT);
     xi(SNMXW            ,4  ,%nz   ,"Syn Mx resp t c writ",  PRINT);
     xi(SNRDU            ,4  ,%nz   ,"Syn Avg r tim c read",  PRINT);
     xi(SNWTU            ,4  ,%nz   ,"Syn Avg r tim c writ",  PRINT);
     xi(SNONC            ,4  ,%nz   ,"Syn Conc IO Ops     ",  PRINT);
     xx(SNReserved76     ,4  ,%nz   ,"Reserved            ",NOPRINT);
 ETRIPLET(SYNCIO   );
 }
  if ( JDDSL > 96) // offset to the seq section
  if ( DSSN2O> 0 && DSSN2L> 0)
  {
  TRIPLET(SYNCIO2    ,pSMFZ+ DSSN2O   ,
        1         ,  DSSN2L,  NOPRINT);
     fprintf( fHandle,"====DS Sync2====\n");
     xi(SNTWR            ,4  ,%nz   ,"Num SyncIO Write    ",  PRINT);
     xi(SNTWO            ,4  ,%nz   ,"Num SyncIO Ok       ",  PRINT);
     xi(SNTWS            ,4  ,%nz   ,"!Syn prev Async     ",  PRINT);
     xi(SNTWB            ,4  ,%nz   ,"!Syn->As Busy Link  ",  PRINT);
     xi(SNTWM            ,4  ,%nz   ,"!Syn->As Cache miss ",  PRINT);
     xi(SNTWP            ,4  ,%nz   ,"!Syn->As op delay   ",  PRINT);
     xi(SNTWE            ,4  ,%nz   ,"!Syn->As no wr token",  PRINT);
     xi(SNTWI            ,4  ,%nz   ,"!Syn->As bad wrtoken",  PRINT);
     xi(SNTWC            ,4  ,%nz   ,"!Syn->As incon wri  ",  PRINT);
     xi(SNTWD            ,4  ,%nz   ,"!Syn->As HL W disble",  PRINT);
     xi(SNTWA            ,4  ,%nz   ,"!Num reads to RW    ",  PRINT);
     xi(SNTWK            ,4  ,%nz   ,"!Sync zHL not done  ",  PRINT);
     xi(SNTWV            ,4  ,%nz   ,"!Sync dev reserved  ",  PRINT);
     xi(SNTWL            ,4  ,%nz   ,"!Sync Not open for W",  PRINT);
     xi(SNTWT            ,4  ,%nz   ,"!Sync dis extended  ",  PRINT);
     xi(SNTWN            ,4  ,%nz   ,"!Sync Not eligible  ",  PRINT);
     xi(SNTWG            ,4  ,%nz   ,"!Sync Stor class    ",  PRINT);
     xi(SNTWY            ,4  ,%nz   ,"!Sync Token error  ",  PRINT);
     xi(SNTWU            ,4  ,%nz   ,"!Sync Unsupp copy  ",  PRINT);
     xi(SNTWF            ,4  ,%nz   ,"!Sync Not page bdy ",  PRINT);
     xi(SNTWQ            ,4  ,%nz   ,"!Sync bad write req",  PRINT);
     xi(SNTWZ            ,4  ,%nz   ,"!Sync zHPF disabled",  PRINT);
     xi(SNTWW            ,4  ,%nz   ,"!Sync zHPF int err ",  PRINT);
     xi(SNTWX            ,4  ,%nz   ,"!Sync misc reasons ",  PRINT);
 ETRIPLET(SYNCIO2  );
 }
 if ( JDDSL > 104 ) // offset to the seq section
 if ( DSSN3O> 0 && DSSN3L> 0)
  {
  TRIPLET(SYNCIO3    ,pSMFZ+ DSSN2O   ,
        1         ,  DSSN2L,  NOPRINT);
     fprintf( fHandle,"====DS Sync2====\n");
     xx(Reserved0        ,2  ,%nz   ,"rserved             ",NOPRINT);
     xx(SNDHW            ,2  ,%nz   ,"SSID                ",  PRINT);
     xx(Reserved4        ,1  ,%nz   ,"reserved            ",NOPRINT);
     xx(SNDWJ            ,1  ,%     ,"Subchannel          ",NOPRINT);
     xx(SNDWN            ,2  ,%     ,"Device number       ",NOPRINT);
     xi(SNDWT            ,4  ,%nz   ,"Num SyncIO Write    ",  PRINT);
     xi(SNDWO            ,4  ,%nz   ,"Num SyncIO Ok       ",  PRINT);
     xi(SNDWS            ,4  ,%nz   ,"!Syn prev Async     ",  PRINT);
     xi(SNDWB            ,4  ,%nz   ,"!Syn->As Busy Link  ",  PRINT);
     xi(SNDWM            ,4  ,%nz   ,"!Syn->As Cache miss ",  PRINT);
     xi(SNDWP            ,4  ,%nz   ,"!Syn->As op delay   ",  PRINT);
     xi(SNDWE            ,4  ,%nz   ,"!Syn->As no wr token",  PRINT);
     xi(SNDWI            ,4  ,%nz   ,"!Syn->As bad wrtoken",  PRINT);
     xi(SNDWC            ,4  ,%nz   ,"!Syn->As incon wri  ",  PRINT);
     xi(SNDWD            ,4  ,%nz   ,"!Syn->As HL W disble",  PRINT);
     xi(SNDWU            ,4  ,%nz   ,"!Sync Unsupp copy  ",  PRINT);
     xi(SNDWK            ,4  ,%nz   ,"!Sync zHL not done ",  PRINT);
     xi(SNDWV            ,4  ,%nz   ,"!Sync dev reserved ",  PRINT);
     xi(SNDWX            ,4  ,%nz   ,"!Sync misc reasons ",  PRINT);
 ETRIPLET(SYNCIO3  );
 }
  if ( DSIOO    > 0)
  {
  TRIPLET(DSIO       ,pSMFZ+ DSIOO    ,
        1         ,  JDIOL,   NOPRINT);
     fprintf( fHandle,"====DS IO   ====\n");
     xj(DSIOR            ,4  ,%nz   ,"Avg resp time     ",NOPRINT);
     xj(DSIOC            ,4  ,%nz   ,"Avg Conn time     ",NOPRINT);
     xj(DSIOP            ,4  ,%nz   ,"Avg Pend time     ",NOPRINT);
     xj(DSIOD            ,4  ,%nz   ,"Avg Disc time     ",NOPRINT);
     xj(DSIOQ            ,4  ,%nz   ,"Avg Queu time     ",NOPRINT);
     xi(DSION            ,4  ,%     ,"Number of IOs     ",  PRINT);
     xi(DSCND            ,4  ,%     ,"Num RW  Cache req ",NOPRINT);
     xi(DSHTS            ,4  ,%     ,"Num RW  Cache hits",NOPRINT);
     xi(DSWCN            ,4  ,%     ,"Num W   Cache req ",NOPRINT);
     xi(DSWHI            ,4  ,%     ,"Num W   Cache hits",NOPRINT);
     xi(DSSEQ            ,4  ,%nz   ,"Num Seq cache    RW",NOPRINT);
     xi(DSRLC            ,4  ,%nz   ,"Num 1trace cache RW",NOPRINT);
     xi(DSICL            ,4  ,%nz   ,"Num No cache req RW",NOPRINT);
     xj(DSDA0            ,4  ,%     ,"Avg IO dev act only",NOPRINT);
     xj(DSMXR            ,4  ,%     ,"Max DS IO resp time",  PRINT);
     xj(DSMXS            ,4  ,%     ,"Max DS IO serv time",  PRINT);
     xj(DSRDD            ,4  ,%nz   ,"Avg disc read  time",NOPRINT);
     xi(DSRDT            ,4  ,%     ,"Number disk reads  ",  PRINT);
     printCache(
                DSION,   //  Number of IOs
                DSRDT,   //  Number reads
                DSCND,   //  Number Cache Cand
                DSHTS,   //  Number Cache hits
                DSWCN,   //  Number Write candi
                DSWHI,   //  Number Write Hits
                DSSEQ,   //  Number SEQ
                DSRLC,   //  Number Rec lvl Cac 1 track
                DSICL    //  Number Inh lvl Cac
               );
     xi(DSHRD            ,4  ,%nz   ,"Number zHPF reads  ",  PRINT);
     xi(DSHWD            ,4  ,%nz   ,"Number zHPF writes ",  PRINT);
     xi(DSR1U            ,4  ,%nz   ,"Avg resp time   uS ",NOPRINT);
     xi(DSC1U            ,4  ,%nz   ,"Avg Conn time   uS ",NOPRINT);
     xi(DSP1U            ,4  ,%nz   ,"Avg Pend time   uS ",NOPRINT);
     xi(DSD1U            ,4  ,%nz   ,"Avg Pend time   uS ",NOPRINT);
     xi(DSQ1U            ,4  ,%nz   ,"Avg Queue time  uS ",NOPRINT);
     xi(DSA1U            ,4  ,%nz   ,"Avg disc time reads",  PRINT);
     xi(DST1U            ,4  ,%nz   ,"Avg dev-act-onlyuS ",NOPRINT);
     xi(DSB1U            ,4  ,%     ,"Avg Busy time   uS ",NOPRINT);
     xi(DSM1U            ,4  ,%     ,"Avg init CR time uS",NOPRINT);
     printAvgRT(
                 DSR1U, DSC1U,DSP1U,DSD1U,
     DSQ1U,DSA1U,DST1U,DSB1U,DSM1U);
     xi(DSSIOS           ,4  ,%nz   ,"Number of req MM   ",  PRINT);
     xi(DSRes120         ,4  ,%nz   ,"Reserved           ",NOPRINT);
     if ( JDIOL  > 124 )
     {
     xi(DSRRU            ,4  ,%nz   ,"avg resp time RandR",  PRINT);
     xi(DSRSU            ,4  ,%nz   ,"avg serv time RandR",  PRINT);
     xi(DSAVGAPRSDDEL    ,4  ,%nz   ,"avg Appl resume del",  PRINT);
     xi(DSAVGAPRSN       ,4  ,%nz   ,"Num resum dely acc ",  PRINT);
     xx(DSReserved140    ,12 ,%nz   ,"reserved           ",NOPRINT);
     }
     U426C
     U426E
 ETRIPLET(DSIO     );
 }
 else
   fprintf(fHandle,"== No Dataset section \n");
 if ( DSAMO    > 0)
 {
  TRIPLET(DSAM       ,pSMFZ+ DSAMO    ,
        1         ,  JDAML  , NOPRINT);
     fprintf( fHandle,"====AM IO   ====\n");
     xi(AMSRB            ,4  ,%nz   ,"Seq read num block",  PRINT);
     xj(AMSRR            ,4  ,%nz   ,"Seq read IO delay ",  PRINT);
     xi(AMSWB            ,4  ,%nz   ,"Seq writ num block",  PRINT);
     xj(AMSWR            ,4  ,%nz   ,"Seq writ IO delay ",  PRINT);
     xi(AMDRB            ,4  ,%nz   ,"Direct r num block",  PRINT);
     xj(AMDRR            ,4  ,%nz   ,"Direct r IO delay ",  PRINT);
     xi(AMDWB            ,4  ,%nz   ,"Direct w num block",  PRINT);
     xj(AMDWR            ,4  ,%nz   ,"Direct w IO delay ",  PRINT);
     xi(AMZRB            ,4  ,%nz   ,"Dir-y  r num block",  PRINT);
     xi(AMZRR            ,4  ,%nz   ,"Dir-y  r IO delay ",  PRINT);
     xi(AMZWB            ,4  ,%nz   ,"Dir-y  w num block",  PRINT);
     xj(AMZWR            ,4  ,%nz   ,"Dir-y  w IO delay ",  PRINT);
     xi(AMRIB            ,8  ,%nz   ,"Bytes read        ",  PRINT);
     xi(AMWIB            ,8  ,%nz   ,"Bytes written     ",  PRINT);
     xi(AMRBD            ,8  ,%nz   ,"Encrypt read      ",NOPRINT);
     xi(AMRBW            ,8  ,%nz   ,"Encrypt write     ",NOPRINT);
     xi(AMRCI            ,4  ,%nz   ,"CI/Blocks read    ",  PRINT);
     xi(AMWCI            ,4  ,%nz   ,"CI/Blocks written ",  PRINT);
     fprintf(fHandle,"AM count total:%u"
                     " RD:%u (seq:%u direct:%u directory:%u)"
                     " WR:%u (seq:%u direct:%u directory:%u)"
                     "\n",
    AMSRB + AMDRB   + AMSWB + AMDWB +  AMZRB +AMZWB, // grand sum
    AMSRB + AMDRB                   +  AMZRB, // sum of reads
    AMSRB,  AMDRB,                     AMZRB, // ind reads seq,dct,dy
                      AMSWB + AMDWB          +AMZWB,  // sum writes
                      AMSWB,  AMDWB,          AMZWB); // ind writes
   U426A
 ETRIPLET(DSAM     );
 }
 if (DSNXT == 0)  break ;
  q  = pSMF  + DSNXT;  // locate the next one
  p = q;
 ETRIPLET(DSHeader );
 ETRIPLET(JobHeader);
}
