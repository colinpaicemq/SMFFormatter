//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution
 /********************************************************************
 * printHexS - Function to print a buffer in hex and character form
 ********************************************************************/
 #define ASCII_STRING \
 "................" \
 "................" \
 " !\"#½%&'()*+,-./" \
 "0123456789:;<=>?" \
 "@ABCDEFGHIJKLMNO" \
 "PQRSTUVWXYZí\\ùí_" \
 "'abcdefghijklmno" \
 "pqrstuvwxyz{ }~." \
  "................" \
  "................" \
  "................" \
  "................" \
  "................" \
  "................"
  const char ascii_tab[256] = ASCII_STRING ;
  void printHexS( void *buff, int length)
 {
   long  i, j;
   unsigned char *pbuff = (unsigned char*)buff;
   long bytesleft;
   char printchar;
   for( i=0; i<length; i+=16, pbuff+=16 )
   {
    if( (bytesleft=length-i) >= 16 )
      bytesleft=16;
    /**********************************************************
     * First print a row of hex chars.
     **********************************************************/
    printf("%8.8X :",i);
    for( j=0; j<bytesleft; j++ ) {
      if(j % 4 == 0) printf(" %2.2X",*(pbuff+j));
      else printf("%2.2X",*(pbuff+j));
    }
    /**********************************************************
     * This pads the hex display with blanks if this is the
      * last row and it's less than 16 bytes long.
      **********************************************************/
     for( j=bytesleft; j<16; j++ ) {
       if(j % 4 == 0) printf("   ");
       else printf("  ");
     }
        /***********************************************************
     * Next print the characters themselves (if they're
     * printable).
     ***********************************************************/
     printf(" !");  // character deliminter
     for( j=0; j<bytesleft; j++ ) {
       printchar = isprint(*(pbuff+j)) ? *(pbuff+j) : '.';
       printf("%c",printchar);
     }
    /**********************************************************
     * ..and pad the last row with blanks if necessary.
     **********************************************************/
     for( j=bytesleft; j<16; j++ ) printf(" ");
  // printf("%c","?"        );
     printf("|");  // middle deliminter
       for( j=0; j<bytesleft; j++ ) {
         printf("%c", ascii_tab[*(pbuff+j)]);
       }
       /**********************************************************
        * ..and pad the last row with blanks if necessary.
        **********************************************************/
        for( j=bytesleft; j<16; j++ ) printf(" ");
//     printf("%c\n"," "        );
       printf("!\n");  // end delimiter
    }
    return;
  }
